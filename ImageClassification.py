# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CQO10yHlA4aJWLTel7oKXKaVRFZ-b6wG

#Image Classification with fashion_mnist
"""

!pip install opencv-python scikit-learn matplotlib numpy

from tensorflow.keras.datasets import fashion_mnist
import numpy as np

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

#Display the shape of the data and labels
print("Train Images Shape:", train_images.shape)
print("Train Labels Shape:", train_labels.shape)
print("Test Images Shape:", test_images.shape)
print("Test Labels Shape:", test_labels.shape)

"""# Visualizing the Fashion_mnist Dataset"""

import matplotlib.pyplot as plt

def plot_images(images, labels, class_names):
    fig, axis = plt.subplots(1, 10, figsize=(20, 3))
    for i in range(10):
      ax = axis[i]
      ax.imshow(images[i], cmap='gray')
      ax.set_title(class_names[labels[i]])
      ax.axis('off')
    plt.show()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
plot_images(train_images, train_labels, class_names)

"""# Preprocessing Data"""

# Normalize the pixel values
train_images = train_images / 255.0
test_images = test_images / 255.0

# Reshape the images to add a channel dimension
train_images = train_images.reshape(train_images.shape[0], 28, 28, 1)
test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)

# Display the shape of the processed images
print("Processed Train Images Shape:", train_images.shape)
print("Processed Test Images Shape:", test_images.shape)

"""# Extracting features"""

import cv2
from skimage.feature import hog

def extract_features(images):
    hog_features = []
    for image in images:
      features = hog(image, pixels_per_cell=(4,4), cells_per_block=(2,2), visualize=False, multichannel=True)
      hog_features.append(features)
    return np.array(hog_features)

train_features_hog = extract_features(train_images)
test_features_hog = extract_features(test_images)

# Display the shape of the features
print("Train Features Shape:", train_features_hog.shape)
print("Test Features Shape:", test_features_hog.shape)

"""# Training the classifier"""

from sklearn.svm import SVC

# Create an SVM classifier
svm_classifier = SVC(kernel='linear', C=1.0)

# Train the classifier
svm_classifier.fit(train_features_hog, train_labels)

# Display the training accuracy
train_accuracy = svm_classifier.score(train_features_hog, train_labels)
print("Training Accuracy:", train_accuracy)

"""# Evaluating the model"""

test_accuracy = svm_classifier.score(test_features_hog, test_labels)
print("Test Accuracy:", test_accuracy)

"""# Visualizing the output predictions"""

y_pred = svm_classifier.predict(test_features_hog)


def  plot_output_images(images, true_labels, predicted_labels, class_names):
    fig, axis = plt.subplots(1, 10, figsize=(20, 3))
    for i in range(10):
      ax = axis[i]
      ax.imshow(images[i].reshape(28, 28), cmap='gray')
      ax.set_title(f"True: {class_names[true_labels[i]]}\nPredicted: {class_names[predicted_labels[i]]}")
      ax.axis('off')
    plt.tight_layout()
    plt.show()

plot_output_images(test_images[:10], test_labels[:10], y_pred[:10], class_names)

